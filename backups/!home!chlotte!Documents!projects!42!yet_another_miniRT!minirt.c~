#include "minirt.h"

void	set_fake_scene(t_scene *scene)
{
	t_cam		cam = {.pos = (t_vec3f){0,1,0}, .dir = (t_vec3f){0,0,0}};
	t_object	sp1 = {.type = e_OBJ_SPHERE, .pos = (t_vec3f){0.7,0.7,2}, .data.sphere.radius = 0.5,
			       .color = (t_rgb){75, 0, 130}};
	t_object	sp2 = {.type = e_OBJ_SPHERE, .pos = (t_vec3f){0.0,0.0,2}, .data.sphere.radius = 0.5,
			       .color = (t_rgb){95, 158, 160}};
	t_object	pl = {.type = e_OBJ_PLANE, .pos = (t_vec3f){0.0,1.0,1.0},
			      .data.plane.orientation = (t_vec3f){1,1,1}, .color = (t_rgb){240, 128, 128}};

	scene->window_res = (t_vec2i){900, 700};
	scene->cam_list = (t_cam *)malloc(2 * sizeof(t_cam));
	scene->cam_list[0] = cam;
	scene->object_list = (t_object *)malloc(4 * sizeof(t_object));
	scene->object_list[0] = sp1;
	scene->object_list[1] = sp2;
	scene->object_list[2] = pl;
	for (int i = 3 ; i < 20 ; i++)
		scene->object_list[i] = (t_object){.type = e_OBJ_NONE};
}

void	ft_bzero(char *str)
{
	size_t i;
	size_t len;

	i = 0;
	len = ft_strlen(str);
	while (i < len)
	{
		str[i] = '\0';
		i++;
	}
}

bool	ft_setup(t_mlx_obj *mlx, t_mlx_img *img, t_vec2f *pixel, t_scene scene)
{
	mlx->mlx_ptr = mlx_init();
	mlx->win_ptr = mlx_new_window(mlx->mlx_ptr, scene.window_res.x, scene.window_res.y, "miniRT");
	img->img_ptr = mlx_new_image(mlx->mlx_ptr, scene.window_res.x, scene.window_res.y);
	if (mlx->win_ptr == NULL)
		return (false);
	*pixel = (t_vec2f){0, 0};
	return (true);
}

int	main(__attribute__((unused))int ac, __attribute__((unused))char **av)
{
	t_mlx_obj	mlx;
	t_mlx_img	img;
	t_scene		scene;
	t_vec2f		pixel;
	t_rgb		pixel_color;

	set_fake_scene(&scene);
	if (!ft_setup(&mlx, &img, &pixel, scene))
		return (0);
	printf("setup ok\n");
	while (pixel.y <= scene.window_res.y)
	{
		while (pixel.x <= scene.window_res.x)
		{
			pixel_color = get_pixel_color(pixel, scene);
			write2image(pixel_color, &img, pixel, scene);
			pixel.x++;
		}
		pixel.x = 0;
		pixel.y++;
	}
	mlx_put_image_to_window(mlx.mlx_ptr, mlx.win_ptr, img.img_ptr, 0, 0);
	printf("main loop exited. congrats\n");
	mlx_key_hook(mlx.win_ptr, ft_exit, &mlx);
	mlx_loop(mlx.mlx_ptr);
	return (0);
}
