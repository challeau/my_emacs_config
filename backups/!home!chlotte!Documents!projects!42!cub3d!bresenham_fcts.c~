#include "cub3d.h"
#include <stdio.h>

// (320, 0) to (640, 0)
void	draw_line_oct1(struct s_mlx_obj mlx, struct s_point p1, struct s_point p2, int color)
{
	int		dx;
	int 		dy;
	int		eps;
	struct s_point	curr;

	dx = p1.x - p2.x;
	dy = p1.y - p2.y;
	eps = 0;
	printf("1: %d %d\n", dx, dy);
	ft_init_point(&curr, p1.x, p1.y);
 	while (curr.y >= p2.y)
	{
		mlx_pixel_put(mlx.mlx_ptr, mlx.win_ptr, curr.x, curr.y, color);
		eps -= dx;
		if ((eps / 2) <= dy){
			eps -= dy;
			curr.x++;
		}
		curr.y--;
	}
}

// (640, 0) to (640, 240)
void	draw_line_oct2(struct s_mlx_obj mlx, struct s_point p1, struct s_point p2, int color)
{
	int		dx;
	int 		dy;
	int		eps;
	struct s_point	curr;

	dx = p1.x - p2.x;
	dy = p1.y - p2.y;
	eps = 0;
	printf("2: %d %d\n", dx, dy);
	ft_init_point(&curr, p1.x, p1.y);
 	while (curr.x <= p2.x)
	{
		mlx_pixel_put(mlx.mlx_ptr, mlx.win_ptr, curr.x, curr.y, color);
		eps -= dy;
		if ((eps / 2) <= dx){
			eps -= dx;
			curr.y--;
		}
		curr.x++;
	}
}

// (640, 240) to (640, 480)
void	draw_line_oct3(struct s_mlx_obj mlx, struct s_point p1, struct s_point p2, int color)
{
	int		dx;
	int 		dy;
	int		eps;
	struct s_point	curr;

	dx = p2.x - p1.x;
	dy = p2.y - p1.y;
	eps = 0;
	ft_init_point(&curr, p1.x, p1.y);
	printf("3: %d %d\n", dx, dy);
	while (curr.x <= p2.x)
	{
		mlx_pixel_put(mlx.mlx_ptr, mlx.win_ptr, curr.x, curr.y, color);
		eps += dy;
		if ((eps << 1) >= dx){
			eps -= dx;
			curr.y++;
		}
		curr.x++;
	}
}

void	ft_bresenham_line(struct s_mlx_obj mlx, struct s_point p1, struct s_point p2, int color)
{
	void (*fct_arrray[3])(struct s_mlx_obj, struct s_point, struct s_point, int)={
		&draw_line_oct1, &draw_line_oct2, &draw_line_oct3};
	int slope;
	int dy = p2.y - p1.y;
	int dx = p2.x - p1.x;

	slope = 0;
	if (dy != 0 && dx != 0)
		slope = dy / dx;
	printf("dy : %d\ndx : %d\nslope: %d\n", dy, dx, slope);
	if (p1.x > screen_width || p2.x > screen_width || p1.y > screen_height || p2.y > screen_height)
		return ;
	if (slope >= 0 && slope <= 1)
		fct_arrray[2](mlx, p1, p2, color);
}
