#include "../../minirt.h"

t_vec3f	float_to_rgb(float value){
	float r;
	float g;
	float b;

	r = value;
	g = ft_mod(value * 256, 1.0);
	r -= g / 256;
	b = ft_mod(value * 256 * 256, 1.0);
	g -= b / 256;
	return ((t_vec3f){r, g, b});
}

t_vec3f	get_normal(t_vec3f pos, t_scene scene){
	float	dist;
	t_vec3f	eps;
	t_vec3f n;

	dist = get_dist(pos, scene);
	eps = (t_vec3f){0.1, 0, 0};
	n = (t_vec3f){
		get_dist(vec_add(pos, (t_vec3f){eps.x, eps.y, eps.y}), scene),
		get_dist(vec_add(pos, (t_vec3f){eps.y, eps.x, eps.y}), scene),
		get_dist(vec_add(pos, (t_vec3f){eps.y, eps.y, eps.x}), scene),
	};
	t_vec3f ret = vec_scal_div(vec_scal_sub(n, dist), .001);
	return(ret);
}

// diffuse lighting
float	get_light(float dist_obj, t_scene scene, uint8_t elem){
	t_vec3f	light_pos;
	t_vec3f	surf_pos;
	t_vec3f	v_light;
	t_vec3f	n;
	float	diff;

	light_pos = (t_vec3f){0, 5, 6};
	surf_pos = vec_add(scene.elem_list[elem].data.cam.orientation,
			   vec_scal_mult(scene.elem_list[elem].data.cam.orientation, dist_obj));
	v_light = vec_normalize(vec_sub(light_pos, surf_pos));
	n = get_normal(surf_pos, scene);
	diff = vec_dot(n, v_light);
	return (diff);
}

