#include "../../inc/minirt.h"

float	sdf_sphere(t_vec3f pos, t_object obj)
{
	float dist;

	dist = vec_magnitude(obj.pos, pos) - obj.data.sphere.radius;
	return(dist);
}

float	sdf_plane(t_vec3f pos, t_object obj)
{
	float dist;

	dist = vec_dot(pos, obj.data.plane.orientation);// + h;
	return (dist);

}

/* float	sdf_square(t_vec3f pos, t_object obj) */
/* { */
/* 	float size = obj.data.square.length; */
/* 	float dist; */

/* 	if (pos.x < 0){ */
		
/* 	} */

/* /\* t_vec3f d; *\/ */

/* 	/\* d = vec_sub((t_vec3f){fabsf(pos.x), fabsf(pos.y), fabsf(pos.z)}, obj.pos); *\/ */
/* 	/\* d = vec_scal_sub(d, size); *\/ */
/* 	/\* float res = vec_length( *\/ */
/* 	/\* 	(t_vec3f){.x = fmaxf(fmax(d.x, d.y), 0.0) + fminf(fmaxf(d.x, d.y), 0.0), *\/ */
/* 	/\* 			.y = 0.0, .z = d.z}); *\/ */
/* 	return (dist); */
/* } */
//pl    0,0,6      0,1,0    0,0,255


/* float	sdf_cylinder(t_vec3f pos, t_object obj) */
/* { */
/* 	return (1); */
/* } */

/* float	sdf_triangle(t_vec3f pos, t_object obj) */
/* { */
/* } */

float	sdf_capsule(t_vec3f pos, t_object obj)
{
	t_vec3f ab = vec_sub(obj.data.capsule.p2, obj.data.capsule.p1);
	t_vec3f ap = vec_sub(pos, obj.data.capsule.p1);
	float t = vec_dot(ab, ap) / vec_dot(ab, ab);
	ft_fclamp(t, 0.0, 1.0);
	t_vec3f c = vec_add(obj.data.capsule.p1, vec_scal_mult(ab, t));
	float dist = vec_length(vec_sub(pos, c)) - obj.data.capsule.radius;
	return (dist);
}
