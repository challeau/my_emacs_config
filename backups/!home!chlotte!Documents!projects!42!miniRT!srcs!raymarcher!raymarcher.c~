#include "../../inc/minirt.h"

t_vec3f	get_normal(t_vec3f pos, t_scene scene){
	float	dist;
	t_vec3f	eps;
	t_vec3f n;

	dist = get_dist(pos, scene);
	eps = (t_vec3f){0.1, 0, 0};
	n = (t_vec3f){
		get_dist(vec_add(pos, (t_vec3f){eps.x, eps.y, eps.y}), scene),
		get_dist(vec_add(pos, (t_vec3f){eps.y, eps.x, eps.y}), scene),
		get_dist(vec_add(pos, (t_vec3f){eps.y, eps.y, eps.x}), scene),
	};
	t_vec3f ret = vec_scal_div(vec_scal_sub(n, dist), .001);
	return(ret);
}

// diffuse lighting
float	get_light(float dist_obj, t_scene scene){
	t_vec3f	light_pos;
	t_vec3f	surf_pos;
	t_vec3f	v_light;
	t_vec3f	n;
	float	diff;

	light_pos = (t_vec3f){0, 5, 6};
	surf_pos = vec_add(scene.cam_list[scene.cam_ref].orientation,
			   vec_scal_mult(scene.cam_list[scene.cam_ref].
					 orientation, dist_obj));
	v_light = vec_normalize(vec_sub(light_pos, surf_pos));
	n = get_normal(surf_pos, scene);
	diff = vec_dot(n, v_light);
	return (diff);
}

float	get_dist(t_vec3f p, t_scene scene){
	uint8_t		i;
	float		obj_dists[20] = (float [20]){[0 ... 19] = 0};
	float		(*sdf[__ELEM_TOTAL])(t_vec3f p, t_scene_element object) = {NULL, NULL, NULL, NULL, sdf_sphere, sdf_plane};

	i = 0;
	while (scene.elem_list[i].type != e_ELEM_NONE){
		obj_dists[i] = sdf[scene.elem_list[i].type](p, scene.elem_list[i]);
		i++;
	}
	return (ft_get_min_dist(obj_dists));
}

float	raymarch(t_scene scene){
	size_t	i;
	float	dist_o;
	float	dist_s;
	t_vec3f	p;

	i = 0;
	dist_o = 0.;
	while (i <= MAX_STEPS){
		p = vec_add(scene.cam_list[scene.cam_ref].orientation,
			    vec_scal_mult(scene.cam_list[scene.cam_ref].dir, dist_o)); // marching
		dist_s = get_dist(p, scene);
		dist_o += dist_s;
		if (dist_o > MAX_DIST || dist_s < SURF_DIST)
			break ;
		i++;
	}
	return (dist_o);
}

t_vec3f	get_pixel_color(t_vec2f pixel, t_scene scene){
	t_vec3f	uv;
	t_rgb	color;
	float	dist_obj;
	
	uv = normalize_screen_coordinates(pixel, scene);
	scene.cam_list[scene.cam_ref].dir = vec_normalize(uv); // gives a unit vector (== size of 1)
	dist_obj = raymarch(scene);
	if (dist_obj < MAX_DIST){
		// most of the cool stuff goes here
		color = float_to_rgb(pow(255 * get_light(dist_obj, scene), 1/2.2));
	}
	else {
		// almost nothing goes here lol
		color = (t_vec3f){0,0,0};
	}
	return (color);
}
