#include "minirt.h"

bool	ft_setup(t_mlx_obj *mlx, t_mlx_img *img, t_vec2 *pixel, t_ray *cam)
{
	mlx->mlx_ptr = mlx_init();
	mlx->win_ptr = mlx_new_window(mlx->mlx_ptr, win_width, win_height, "miniRT");
	img->img_ptr = mlx_new_image(mlx->mlx_ptr, win_width, win_height);
	if (mlx->win_ptr == NULL)
		return (false);
	*pixel = (t_vec2){0, 0};
	*cam = (t_ray){(t_vec3){0, 1, 0}, (t_vec3){0, 0, 0}};	
	return (true);
}

float	(**ret_pf_array(void))(t_vec3 p, t_object obj)
{
	static float	(*ret_fptr_array[__OBJ_TOTAL])(t_vec3, t_object) =
		{[e_OBJ_SPHERE] = &sdf_sphere, [e_OBJ_PLANE] = &sdf_plane};

	return (&ret_fptr_array[0]);
}

int	main(__attribute__((unused))int ac, __attribute__((unused))char **av)
{
	t_vec2		pixel;
	t_ray		cam;
	t_vec3		color;
	t_mlx_obj	mlx;
	t_mlx_img	img;

	ft_setup(&mlx, &img, &pixel, &cam);
	while (pixel.y <= win_height)
	{
		while (pixel.x <= win_width)
		{
			color = get_pixel_color(cam, pixel);
			write2image(color, img, pixel);
			pixel.x++;
		}
		pixel.x = 0;
		pixel.y++;
	}
	mlx_put_image_to_window(mlx.mlx_ptr, mlx.win_ptr, img.img_ptr, 0, 0);
	mlx_key_hook(mlx.win_ptr, ft_exit, &mlx);
	mlx_loop(mlx.mlx_ptr);
	return (0);
}
