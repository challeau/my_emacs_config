#include "minirt.h"

t_vec3	float_to_rgb(float value){
	float r;
	float g;
	float b;

	r = value;
	g = ft_mod(value * 256, 1.0);
	r -= g / 256;
	b = ft_mod(value * 256 * 256, 1.0);
	g -= b / 256;
	return ((t_vec3){r, g, b});
}

t_vec3	get_normal(t_vec3 pos){
	float	dist;
	t_vec3	eps_pos;
	t_vec3 n;

	dist = get_dist(pos);
	eps_pos = vec_sub(pos, (t_vec3){0.01, 0, 0});
	n = (t_vec3){
		dist - get_dist((t_vec3){eps_pos.x, eps_pos.y, eps_pos.y}),
		dist - get_dist((t_vec3){eps_pos.y, eps_pos.x, eps_pos.y}),
		dist - get_dist((t_vec3){eps_pos.y, eps_pos.y, eps_pos.x}),
	};
	return(vec_normalize(n));
}

// diffuse lighting
t_vec3	get_light(t_ray cam, float dist_obj){
	t_vec3	light_pos;
	t_vec3	surf_pos;
	t_vec3	v_light;
	t_vec3	n;
	float	diff;

	light_pos = (t_vec3){0, 55, 60};
	surf_pos = vec_add(cam.ori, vec_scal_mult(cam.dir, dist_obj));
	v_light = vec_normalize(vec_sub(light_pos, surf_pos));
	n = get_normal(surf_pos);
	diff = vec_dot(n, v_light);
	return (float_to_rgb(diff));
}

