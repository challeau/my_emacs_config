#include "minirt.h"
# define win_h 700
# define win_w 700


int	ft_exit(int keycode, void *param)
{
	t_mlx_obj *mlx;

	mlx = param;
	if (keycode == ESC){
		mlx_destroy_window(mlx->mlx_ptr, mlx->win_ptr);
		// find way to free scene
		exit(0);
	}
	return (1);
}

void	write_to_image(t_vec3f color, t_mlx_img *img, t_vec2f pixel){
	int	bpp;
	int	size_line;
	int	endian;
	size_t	pos;

	img->img_data = mlx_get_data_addr(img->img_ptr, &bpp, &size_line, &endian);
	pos = (pixel.y * 4 * win_h) + pixel.x * 4;
	img->img_data[pos] = color.x;		// red
	img->img_data[pos + 1] = color.y;	// green
	img->img_data[pos + 2] = color.z;	// blue
}

t_vec3f	normalize_screen_coordinates(t_vec2f pixel){
	t_vec3f	uv;

	uv = (t_vec3f){(pixel.x - 0.5 * win_w) / win_h,
		      -((pixel.y - 0.5 * win_h) / win_h), 1};
	return (uv);
}

float	sdf_sphere(t_vec3f pos, t_object obj){
	float dist;

	dist = vec_magnitude(obj.pos, pos) - obj.data.sphere.radius;
	return(dist);
}

float	sdf_plane(t_vec3f pos, t_object obj){
	float dist;

	dist = vec_dot(pos, obj.data.plane.orientation);// + h;
	return (dist);
}


float	ft_min_dist(float *obj_dists){
	uint8_t	i;
	float	min_dist;

	i = 0;
	min_dist = obj_dists[i];
	while (obj_dists[++i] && i < 20){
		if (obj_dists[i] < min_dist){
			min_dist = obj_dists[i];
		}
	}
	return (min_dist);
}


float	get_dist(t_vec3f p, t_object *list)
{
	float	(*sdfs[__OBJ_TOTAL])(t_vec3f pos, t_object obj) = {sdf_sphere, sdf_plane};
	float	obj_dists[20] = (float[20]){[0 ... 19] = 0.0};

	for (int i = 0 ; list[i].type != e_OBJ_NONE ; i++)
		obj_dists[i] = sdfs[list[i].type](p, list[i]);
	return (ft_min_dist(obj_dists));
}

float	raymarch(t_cam cam, t_object *list)
{
	size_t	i;
	t_vec3f p;
	float	dist_origin;
	float	dist_scene;

	i = 0;
	dist_origin = 0.0;
	while (i < MAX_STEPS)
	{
		p = vec_add(cam.pos, vec_scal_mult(cam.dir, dist_origin));
		dist_scene = get_dist(p, list);
		dist_origin += dist_scene;
		if (dist_origin > MAX_DIST || dist_scene < SURF_DIST)
			break ;
		i++;
	}
	return (dist_origin);
}

t_rgb	get_pixel_color(t_vec2f pixel)
{
	t_vec3f		uv;
	t_rgb		color = {0, 0, 0};
	float		dist;
	t_object	*list = (t_object *)malloc(4 * sizeof(t_object));
	for (int i = 0 ; i < 4 ; i++)
		list[i] = (t_object){.type = e_OBJ_NONE};
	list[0] = (t_object){.type = e_OBJ_SPHERE,
			     .pos = {0.0, 1, 6},
			     .data.sphere.radius = 1};
	list[1] = (t_object){.type = e_OBJ_PLANE,
			     .pos = {0.7, 0.7, 0.1}};
	t_cam		cam = (t_cam){.pos = {0, 1, 0}};

	uv = normalize_screen_coordinates(pixel);
	cam.dir = vec_normalize((t_vec3f){uv.x, uv.y, 1});
	dist = raymarch(cam, list);
	color = (t_rgb){dist/6, dist/6, dist/6};
	return (color);
}

int	main(__attribute__((unused))int ac, __attribute__((unused))char **av)
{
	t_vec2f		pixel = {0, 0};
	t_rgb		pixel_color;	
	t_mlx_obj	mlx;
	t_mlx_img	img;

	mlx.mlx_ptr = mlx_init();
	mlx.win_ptr = mlx_new_window(mlx.mlx_ptr, win_w, win_h, "miniRT");
	img.img_ptr = mlx_new_image(mlx.mlx_ptr, win_w, win_h);
	if (mlx.win_ptr == NULL)
		return (false);
	while (pixel.y <= win_h)
	{
		while (pixel.x <= win_w)
		{
			pixel_color = get_pixel_color(pixel);
			write_to_image(pixel_color, &img, pixel);
			pixel.x++;
		}
		pixel.x = 0;
		pixel.y++;
	}
	mlx_put_image_to_window(mlx.mlx_ptr, mlx.win_ptr, img.img_ptr, 0, 0);
	printf("main loop exited. congrats\n");
	mlx_key_hook(mlx.win_ptr, ft_exit, &mlx);
	mlx_loop(mlx.mlx_ptr);
	return (0);
}
