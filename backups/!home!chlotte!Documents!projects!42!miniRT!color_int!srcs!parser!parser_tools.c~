#include "../../inc/minirt.h"

bool	check_attributes_num(char **attributes, uint8_t expected){
	uint8_t i;

	i = 0;
	while (attributes[i])
		i++;
	if (i != expected)
		return (false);
	return (true);
}

/* returns 1 if the strings are identical,
   0 if one str is contained in the other,
   -1 if they are strictly different. */
int	ft_compare_strs(const char *str1, const char *str2){
	size_t		i;
	size_t		j;
	const char	*s1;
	const char	*s2;

	i = 0;
	j = 0;
	s1 = ft_strlen(str1) < ft_strlen(str2) ? str2 : str1;
	s2 = ft_strlen(str1) < ft_strlen(str2) ? str1 : str2;
	while (s1[i]){
		while (s1[i + j] == s2[j]){
			if (s2[j] == '\0')
				return (i == 0 && s1[i + j] == '\0' ? 1 : 0);
//				return (ft_strlen(str1) == ft_strlen(str2) ? 1 : 0);
			j++;
		}
		i++;
	}
	return (-1);
}

bool	get_elem_color(char *attributes, t_rgb *color){
	int	rgb[3];
	uint8_t	i;

	i = 0;
	while (i <= 2){
		rgb[i] = ft_atoi(attributes);
		if (rgb[i] < 0 || rgb[i] > 255)
			return (false);
		if (i++ != 2)
			attributes += ft_strchr(attributes, ',') + 1;
	}
	color->x = rgb[0];
	color->y = rgb[1];
	color->z = rgb[2];
	return (true);
}

bool	get_elem_orientation(char *attributes, t_vec3f *ori){
	float	o[3];
	uint8_t	i;

	i = 0;
	while (i <= 2){
		o[i] = ft_atof(attributes);
		if (o[i] < -1. || o[i] > 1.)
			return (false);
		if (i++ != 2)
			attributes += ft_strchr(attributes, ',') + 1;
	}
	ori->x = o[0];
	ori->y = o[1];
	ori->z = o[2];
	return (true);	
}

bool	get_elem_position(char *attributes, t_vec3f *pos){
	pos->x = ft_atof(attributes);
	attributes += ft_strchr(attributes, ',') + 1;
	pos->y = ft_atof(attributes);
	attributes += ft_strchr(attributes, ',') + 1;
	pos->z = ft_atof(attributes);
	return (true);
}
